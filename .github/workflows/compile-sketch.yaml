name: Compile Sketch

# The workflow will run on every push to the repository
on:
  - push

jobs:
  compile-sketch:
    runs-on: ubuntu-latest

    steps:
      # This step makes the contents of the repository available to the workflow
      - name: Checkout repository
        uses: actions/checkout@v2

      # For more information: https://github.com/arduino/compile-sketches#readme
      - name: Compile Arduino sketch
        uses: arduino/compile-sketches@v1
        with:
          # The default is to compile for the Arduino Uno board. If you want to compile for other boards, use the `fqbn` input.
          sketch-paths: |
            # Configure the action to search all folders under the root of the repository for sketches and compile them.
            # This is formatted as a YAML list, which makes it possible to have multiple sketch paths if needed.
            - ./ArduinoProject
          libraries: |
            - name: "DHT_nonblocking"
              source-url: https://github.com/olewolf/DHT_nonblocking.git
      - name: Compile Esp sketch
        uses: arduino/compile-sketches@v1
        with:
          fqbn: 'esp8266:esp8266:nodemcuv2'
          # The default is to compile for the Arduino Uno board. If you want to compile for other boards, use the `fqbn` input.
          sketch-paths: |
            # Configure the action to search all folders under the root of the repository for sketches and compile them.
            # This is formatted as a YAML list, which makes it possible to have multiple sketch paths if needed.
            - ./EspProject
          platforms: |
            - name: 'esp8266:esp8266'
              version: latest
              source-url: 'http://arduino.esp8266.com/stable/package_esp8266com_index.json'
          libraries: |
            - name: "PubSubClient"
              source-url: https://github.com/knolleary/pubsubclient.git   
  find-tag:
    needs: compile-sketch
    if:  success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      outputTagJob: '${{ steps.relese_msg.outputs.RELESE_NAME }}' #The outuput of the job
    steps:
      - name: Clone Repo with Checkout
        uses: actions/checkout@v2
      - name: Extract relese message if present
        shell: bash
        id: extract_tag_msg
        run: >
          echo "::set-output name=TAG_MSG::$(echo
          "${{github.event.head_commit.message}}" | grep -o -P
          '(?<=-TAG{).*(?=})')" #Extract tag name if present
      - name: Fetch tag
        shell: bash
        run: |
          git fetch --prune --unshallow --tags #Pull all tags
      - name: Fill tag if empty
        id: relese_msg
        shell: bash
        run: |
          if [ "${{steps.extract_tag_msg.outputs.TAG_MSG}}" != "" ] #Check if the user has specified a name for the tag
          then #if yes use it
              echo "::set-output name=RELESE_NAME::$(echo ${{steps.extract_tag_msg.outputs.TAG_MSG}})" 
          else #if generate one new tag incrementing fixes number like x.y.z+1
              val=$(git describe --tags --abbrev=0)
              newval=$(echo ${val##*.})
              newval=$((newval+1))
              newval="${val%.*}.$newval"
              echo "::set-output name=RELESE_NAME::$(echo $newval)"
              echo $newval 
          fi
  deploy:
    needs: find-tag
    if: '${{ needs.FindTagJob.outputs.outputTagJob != '''' }}'
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repo with Checkout
        uses: actions/checkout@v2
      - name: Create relese if tag commit contain a tag message
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          tag_name: '${{ needs.FindTagJob.outputs.outputTagJob }}'
          release_name: 'Release ${{ needs.FindTagJob.outputs.outputTagJob }}'
          draft: falses
          prerelease: false
